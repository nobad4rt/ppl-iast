name: IAST
on:
  push:
    branches:
      - main
jobs:
  test:
    name: Dynamic Application Security Test
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Create isolated network
        run: docker network create --driver bridge isolated      

      - name: Deploy AUT
        run: docker build -t my-php-site:latest .
        
      - name: Run AUT
        run: docker run --network=isolated -p 80:80 --name docker-apache -t -d my-php-site:latest

      - name: Get AUT URL
        run: |
          URL=http://$(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1)
          echo "URL=$URL" >> $GITHUB_ENV

      - name: Check AUT URL
        run: curl ${{ env.URL }}

      - name: ZAP Scan
        uses: hermanka/action-full-scan@master
        with:
          target: ${{ env.URL }}
          network_name: isolated
      
      - name: stop docker
        run: docker stop docker-apache
    
  sast:
    name: Psalm
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Psalm Security Scan
        uses: docker://ghcr.io/psalm/psalm-security-scan

      - name: Import Security Analysis results into Github Security Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  phpstan_sast:
    name: PHPStan Security Analysis
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl
          tools: composer:v2, phpstan

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress || echo "No composer.json found"

      - name: PHPStan Static Analysis
        id: phpstan
        run: |
          # Jalankan analisis dan simpan output ke file
          phpstan analyse -l 5 *.php --no-progress > phpstan-output.txt || true
          
      - name: PHPStan Results Summary
        run: |
          echo "### Hasil Analisis PHPStan" >> $GITHUB_STEP_SUMMARY
          echo "Berikut adalah hasil analisis keamanan dari PHPStan:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat phpstan-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  snyk_sast:
    name: Snyk Security Scan
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Snyk
        uses: snyk/actions/setup@master
        
      - name: Snyk Code Test
        id: snyk-test
        run: |
          # Jalankan analisis dan simpan output mentah
          snyk code test --json > snyk-output.json || true
          echo "SNYK_EXIT_CODE=$?" >> $GITHUB_ENV
          
          # Tetap buat SARIF file untuk code scanning
          snyk code test --sarif-file-output=snyk-results.sarif || true
          
          # Periksa apakah file SARIF dibuat
          if [ ! -f snyk-results.sarif ]; then
            echo "File SARIF tidak ditemukan, membuat file kosong"
            echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Snyk Code","informationUri":"https://snyk.io","rules":[]}},"results":[]}]}' > snyk-results.sarif
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Snyk Results Summary
        run: |
          echo "### Hasil Scan Snyk Code" >> $GITHUB_STEP_SUMMARY
          echo "Berikut adalah hasil analisis keamanan kode:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Tampilkan hasil Snyk secara langsung
          snyk code test || true >> $GITHUB_STEP_SUMMARY
          
          # Debug: periksa isi file JSON
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Debug Output JSON" >> $GITHUB_STEP_SUMMARY
          echo "Struktur JSON (key level teratas):" >> $GITHUB_STEP_SUMMARY
          jq 'keys' snyk-output.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Tidak dapat memproses file JSON" >> $GITHUB_STEP_SUMMARY
          
          # Coba ekstrak kerentanan dengan berbagai path yang mungkin
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Detail Kerentanan" >> $GITHUB_STEP_SUMMARY
          
          # Metode 1: Struktur standar
          echo "Metode 1 - vulnerabilities langsung:" >> $GITHUB_STEP_SUMMARY
          jq -r '.vulnerabilities[] | "- " + (.title // "No title") + " (" + (.severity // "unknown") + ")"' snyk-output.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Tidak ada vulnerabilities di level atas" >> $GITHUB_STEP_SUMMARY
          
          # Metode 2: Struktur alternatif untuk Snyk Code
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Metode 2 - issues.vulnerabilities:" >> $GITHUB_STEP_SUMMARY
          jq -r '.issues.vulnerabilities[] | "- " + (.title // "No title") + " (" + (.severity // "unknown") + ")"' snyk-output.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Tidak ada issues.vulnerabilities" >> $GITHUB_STEP_SUMMARY
          
          # Metode 3: Struktur results seperti SARIF
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Metode 3 - results:" >> $GITHUB_STEP_SUMMARY
          jq -r '.runs[].results[] | "- " + (.message.text // "No description") + " (severity level: " + (.level // "unknown") + ")"' snyk-output.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Tidak ada struktur results" >> $GITHUB_STEP_SUMMARY
          
          echo '```' >> $GITHUB_STEP_SUMMARY
        env: 
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Upload SARIF ke GitHub Code Scanning jika repository mendukung
      - name: Upload Snyk SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: snyk-results.sarif
